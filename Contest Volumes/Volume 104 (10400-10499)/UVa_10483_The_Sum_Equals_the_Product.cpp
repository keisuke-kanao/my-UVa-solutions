
/*
	UVa 10483 - The Sum Equals the Product

	To build using Visual Studio 2012:
		cl -EHsc -O2 UVa_10483_The_Sum_Equals_the_Product.cpp
*/

#include <algorithm>
#include <iterator>
#include <cstdio>
using namespace std;

struct sp {
	int s_, a_, b_;

	bool operator<(const sp& s) const {return s_ < s.s_;}
};

const sp sps[] = {
	{525, 150, 175},
	{540, 150, 150},
	{546, 140, 156},
	{549, 125, 180},
	{555, 120, 185},
	{561, 136, 150},
	{567, 125, 162},
	{570, 125, 160},
	{585, 100, 225},
	{588, 98, 240},
	{600, 100, 200},
	{612, 90, 250},
	{630, 100, 180},
	{642, 107, 160},
	{660, 80, 250},
	{660, 110, 150},
	{663, 125, 130},
	{675, 75, 300},
	{726, 121, 125},
	{735, 120, 125},
	{744, 120, 124},
	{750, 100, 150},
	{759, 69, 250},
	{765, 85, 180},
	{783, 60, 348},
	{792, 72, 220},
	{798, 70, 228},
	{810, 60, 300},
	{819, 65, 250},
	{825, 75, 200},
	{840, 60, 280},
	{840, 100, 140},
	{891, 66, 225},
	{897, 52, 345},
	{900, 50, 400},
	{930, 60, 250},
	{945, 70, 200},
	{957, 100, 132},
	{966, 46, 420},
	{966, 105, 125},
	{975, 50, 325},
	{981, 45, 436},
	{996, 80, 166},
	{1050, 50, 300},
	{1050, 75, 175},
	{1071, 56, 250},
	{1080, 40, 500},
	{1092, 42, 400},
	{1125, 100, 125},
	{1134, 84, 150},
	{1155, 50, 280},
	{1155, 60, 220},
	{1170, 45, 325},
	{1185, 40, 395},
	{1197, 72, 175},
	{1206, 36, 500},
	{1221, 110, 111},
	{1245, 40, 375},
	{1272, 60, 212},
	{1281, 40, 366},
	{1314, 32, 625},
	{1320, 100, 120},
	{1326, 96, 125},
	{1353, 33, 500},
	{1365, 40, 350},
	{1380, 80, 150},
	{1404, 30, 624},
	{1410, 75, 160},
	{1419, 44, 300},
	{1449, 35, 414},
	{1458, 45, 288},
	{1476, 82, 144},
	{1479, 29, 600},
	{1482, 32, 475},
	{1482, 76, 156},
	{1500, 50, 250},
	{1545, 30, 515},
	{1560, 60, 200},
	{1566, 100, 116},
	{1575, 45, 280},
	{1590, 30, 500},
	{1596, 42, 304},
	{1602, 32, 445},
	{1650, 25, 800},
	{1665, 25, 740},
	{1722, 25, 672},
	{1722, 35, 375},
	{1722, 82, 140},
	{1740, 50, 240},
	{1755, 25, 650},
	{1755, 60, 195},
	{1788, 48, 250},
	{1848, 28, 500},
	{1848, 40, 308},
	{1875, 25, 600},
	{1911, 24, 637},
	{1935, 90, 125},
	{1947, 24, 625},
	{1995, 25, 570},
	{2025, 75, 150},
	{2040, 20, 1000},
	{2040, 40, 300},
	{2061, 20, 916},
	{2070, 20, 900},
	{2145, 20, 825},
	{2211, 25, 536},
	{2268, 18, 1050},
	{2280, 20, 760},
	{2310, 20, 750},
	{2310, 25, 525},
	{2310, 100, 110},
	{2343, 88, 125},
	{2394, 19, 800},
	{2436, 30, 406},
	{2442, 32, 375},
	{2475, 50, 225},
	{2478, 20, 708},
	{2520, 20, 700},
	{2532, 16, 1250},
	{2580, 30, 400},
	{2625, 25, 500},
	{2655, 45, 250},
	{2727, 15, 1212},
	{2805, 20, 660},
	{2805, 55, 200},
	{2808, 100, 108},
	{2835, 90, 120},
	{2853, 36, 317},
	{2910, 25, 485},
	{2970, 50, 220},
	{2997, 72, 150},
	{3030, 25, 480},
	{3036, 46, 240},
	{3045, 15, 1000},
	{3069, 40, 279},
	{3144, 24, 500},
	{3150, 20, 630},
	{3219, 74, 145},
	{3225, 20, 625},
	{3234, 44, 250},
	{3240, 60, 180},
	{3276, 26, 450},
	{3393, 25, 468},
	{3402, 12, 1500},
	{3429, 54, 200},
	{3465, 40, 275},
	{3471, 26, 445},
	{3549, 14, 1000},
	{3570, 85, 125},
	{3591, 21, 570},
	{3591, 50, 216},
	{3591, 76, 140},
	{3621, 71, 150},
	{3624, 20, 604},
	{3645, 30, 375},
	{3720, 20, 600},
	{3738, 15, 875},
	{3738, 60, 178},
	{3768, 12, 1256},
	{3786, 12, 1250},
	{3969, 72, 147},
	{4002, 32, 345},
	{4020, 10, 2000},
	{4068, 10, 1808},
	{4185, 40, 270},
	{4251, 10, 1625},
	{4275, 25, 450},
	{4305, 100, 105},
	{4350, 20, 580},
	{4389, 84, 125},
	{4515, 10, 1505},
	{4515, 75, 140},
	{4530, 10, 1500},
	{4536, 36, 300},
	{4587, 12, 1100},
	{4596, 16, 750},
	{4620, 70, 150},
	{4746, 32, 339},
	{4779, 9, 1770},
	{4818, 15, 803},
	{4890, 15, 800},
	{4914, 10, 1404},
	{4935, 10, 1400},
	{4935, 60, 175},
	{5016, 8, 2500},
	{5085, 20, 565},
	{5115, 25, 440},
	{5133, 8, 2175},
	{5208, 8, 2100},
	{5208, 84, 124},
	{5229, 63, 166},
	{5265, 30, 360},
	{5289, 43, 246},
	{5304, 100, 104},
	{5373, 8, 1990},
	{5460, 50, 210},
	{5460, 80, 130},
	{5637, 8, 1879},
	{5649, 8, 1875},
	{5742, 22, 500},
	{5787, 18, 625},
	{5850, 65, 160},
	{5859, 25, 434},
	{6006, 11, 1120},
	{6069, 7, 2312},
	{6072, 12, 1000},
	{6072, 20, 552},
	{6132, 42, 250},
	{6138, 18, 620},
	{6153, 8, 1750},
	{6204, 94, 110},
	{6270, 20, 550},
	{6300, 10, 1250},
	{6399, 24, 450},
	{6552, 52, 200},
	{6633, 8, 1675},
	{6681, 6, 3275},
	{6708, 50, 208},
	{6783, 28, 380},
	{6885, 15, 750},
	{6996, 6, 2750},
	{7035, 35, 300},
	{7077, 6, 2696},
	{7128, 8, 1620},
	{7203, 98, 105},
	{7212, 10, 1202},
	{7260, 10, 1200},
	{7434, 59, 175},
	{7473, 8, 1590},
	{7482, 60, 172},
	{7509, 6, 2503},
	{7518, 6, 2500},
	{7560, 20, 540},
	{7623, 18, 605},
	{7650, 25, 425},
	{7722, 66, 156},
	{7800, 40, 260},
	{7980, 30, 350},
	{8010, 5, 4000},
	{8109, 5, 3604},
	{8316, 6, 2310},
	{8343, 18, 600},
	{8451, 12, 939},
	{8463, 5, 3250},
	{8463, 28, 375},
	{8487, 82, 125},
	{8547, 11, 1036},
	{8757, 7, 1800},
	{9009, 9, 1300},
	{9015, 5, 3000},
	{9048, 8, 1500},
	{9177, 20, 532},
	{9282, 32, 325},
	{9345, 25, 420},
	{9807, 5, 2802},
	{10008, 4, 5000},
	{10134, 4, 4500},
	{10206, 6, 2100},
	{10212, 74, 138},
	{10215, 10, 1125},
	{10302, 100, 102},
	{10455, 50, 205},
	{10455, 85, 120},
	{10569, 4, 4065},
	{10761, 75, 136},
	{10773, 45, 228},
	{10842, 25, 417},
	{10914, 17, 625},
	{10941, 21, 500},
	{11046, 5, 2625},
	{11046, 20, 526},
	{11076, 26, 400},
	{11118, 68, 150},
	{11121, 11, 1000},
	{11193, 8, 1435},
	{11256, 4, 3752},
	{11262, 4, 3750},
	{11331, 9, 1250},
	{11445, 20, 525},
	{11466, 25, 416},
	{11484, 58, 176},
	{11730, 60, 170},
	{11928, 8, 1420},
	{11931, 41, 250},
	{12036, 6, 2000},
	{12111, 10, 1101},
	{12210, 10, 1100},
	{12264, 4, 3500},
	{12312, 12, 900},
	{12525, 5, 2500},
	{12705, 84, 121},
	{12801, 51, 200},
	{12954, 50, 204},
	{13281, 8, 1398},
	{13629, 4, 3300},
	{14040, 20, 520},
	{14406, 5, 2401},
	{14430, 5, 2400},
	{14430, 6, 1924},
	{14586, 11, 975},
	{14715, 10, 1080},
	{15009, 3, 5000},
	{15015, 15, 700},
	{15045, 40, 255},
	{15213, 8, 1375},
	{15630, 4, 3126},
	{15645, 4, 3125},
	{16044, 14, 750},
	{16686, 81, 125},
	{16929, 6, 1875},
	{17010, 75, 135},
	{17034, 34, 300},
	{17226, 32, 319},
	{17286, 20, 516},
	{17316, 16, 650},
	{17835, 25, 410},
	{18024, 4, 3000},
	{18333, 8, 1350},
	{18627, 12, 875},
	{18669, 40, 254},
	{18870, 30, 340},
	{19596, 6, 1840},
	{20004, 2, 10000},
	{20007, 2, 9880},
	{20202, 2, 9100},
	{20202, 91, 111},
	{20295, 5, 2250},
	{20301, 100, 101},
	{20907, 2, 8280},
	{21033, 20, 513},
	{21054, 4, 2900},
	{21093, 8, 1335},
	{21138, 13, 800},
	{21186, 9, 1177},
	{21252, 2, 8050},
	{21546, 7, 1539},
	{21870, 45, 225},
	{22059, 19, 540},
	{22083, 25, 408},
	{22260, 10, 1050},
	{22503, 2, 7501},
	{22506, 2, 7500},
	{22692, 2, 7440},
	{22899, 24, 425},
	{23832, 8, 1324},
	{24018, 3, 4000},
	{24252, 2, 7050},
	{24255, 5, 2200},
	{24381, 6, 1800},
	{24507, 2, 7000},
	{25317, 4, 2813},
	{25326, 96, 105},
	{25452, 50, 202},
	{25452, 90, 112},
	{25600, -1, -1} // sentinel
};

const size_t n = sizeof(sps) / sizeof(sps[0]);

int main()
{
	int s, sf, e, ef;
	while (scanf("%d.%d %d.%d", &s, &sf, &e, &ef) != EOF) {
		sp ssp, esp;
		ssp.s_ = s * 100 + sf; esp.s_ = e * 100 + ef;
		int si = distance(sps, lower_bound(sps, sps + n, ssp)),
			ei = distance(sps, lower_bound(sps, sps + n, esp));
		for (int pi = si; pi < ei; pi++) {
			const sp& spi = sps[pi];
			int c = spi.s_ - (spi.a_ + spi.b_);
			printf("%d.%02d = %d.%02d + %d.%02d + %d.%02d = %d.%02d * %d.%02d * %d.%02d\n",
				spi.s_ / 100, spi.s_ % 100, spi.a_ / 100, spi.a_ % 100, spi.b_ / 100, spi.b_ % 100, c / 100, c % 100,
				spi.a_ / 100, spi.a_ % 100, spi.b_ / 100, spi.b_ % 100, c / 100, c % 100);
		}
		if (sps[ei].s_ == esp.s_) {
			const sp& spi = sps[ei];
			int c = spi.s_ - (spi.a_ + spi.b_);
			printf("%d.%02d = %d.%02d + %d.%02d + %d.%02d = %d.%02d * %d.%02d * %d.%02d\n",
				spi.s_ / 100, spi.s_ % 100, spi.a_ / 100, spi.a_ % 100, spi.b_ / 100, spi.b_ % 100, c / 100, c % 100,
				spi.a_ / 100, spi.a_ % 100, spi.b_ / 100, spi.b_ % 100, c / 100, c % 100);
		}
	}
	return 0;
}

/*
int main()
{
	int s, sf, e, ef;
	while (scanf("%d.%d %d.%d", &s, &sf, &e, &ef) != EOF) {
		long long is = s * 100 + sf, ie = e * 100 + ef;
		for (long long i = is; i <= ie; i++)
			for (long long a = 1, ae = i * 10000; a * a * a <= ae; a++)
				for (long long b = a; a * b * b <= ae; b++) {
					long long c = i - (a + b);
					if (c < b)
						break;
					if (a * b * c == ae && a + b + c == i)
						printf("%lld.%02lld = %lld.%02lld + %lld.%02lld + %lld.%02lld = %lld.%02lld * %lld.%02lld * %lld.%02lld\n",
							i / 100, i % 100, a / 100, a % 100, b / 100, b % 100, c / 100, c % 100,
							a / 100, a % 100, b / 100, b % 100, c / 100, c % 100);
				}
	}
	return 0;
}
*/

/*
Sample Input

5.70 6.10

Sample Output

5.70 = 1.25 + 1.60 + 2.85 = 1.25 * 1.60 * 2.85
5.85 = 1.00 + 2.25 + 2.60 = 1.00 * 2.25 * 2.60
5.88 = 0.98 + 2.40 + 2.50 = 0.98 * 2.40 * 2.50
6.00 = 1.00 + 2.00 + 3.00 = 1.00 * 2.00 * 3.00

*/

