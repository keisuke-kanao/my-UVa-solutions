
/*
	UVa 702 - The Vindictive Coach

	To build using Visual Studio 2012:
		cl -EHsc -O2 UVa_11780_Miles_2_Km.cpp
*/

#include <algorithm>
#include <cstdio>
#include <cmath>
using namespace std;

/*
const int nr_fibs = 17;
int fibs[nr_fibs + 1] = {
	0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597
};
const double km_per_mile = 1.6;
double miles, lowest_error;

bool miles_2_km(int n, int remaining, int kms)
{
	if (!remaining) {
		lowest_error = min(lowest_error, fabs(miles - kms));
		return (lowest_error == 0.0) ? true : false;
	}
	else {
		for (int i = n; i > 1; i--)
			if (fibs[i - 1] <= remaining &&
				miles_2_km(i, remaining - fibs[i - 1], kms + fibs[i]))
				return true;
		return false;
	}
}

int main()
{
	while (true) {
		int N;
		scanf("%d", &N);
		if (!N)
			break;
		miles = km_per_mile * N, lowest_error = km_per_mile * N;
		miles_2_km(nr_fibs, N, 0);
		printf("%.2lf\n", lowest_error);
	}
}
*/

const int N_max = 1000;
double lowest_errors[N_max + 1] = {
0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00,
0.40, 0.20, 0.20, 0.40, 0.00, 0.40, 0.20, 0.20, 0.40, 0.00
};

int main()
{
	while (true) {
		int N;
		scanf("%d", &N);
		if (!N)
			break;
		printf("%.2lf\n", lowest_errors[N]);
	}
}

